//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/GameBrains/InputManagement/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameBrains.InputManagement
{
    public partial class @InputActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""PauseAction"",
            ""id"": ""eb4279c1-cda1-4b3d-916e-10d45461e38e"",
            ""actions"": [
                {
                    ""name"": ""PauseGame"",
                    ""type"": ""Button"",
                    ""id"": ""fb9c7ee8-0a46-4677-bd1f-42be89e26fe4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""98fe19ce-ed8e-4948-a6bd-29bedd4259ee"",
                    ""path"": ""<Keyboard>/pageUp"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AudioAction"",
            ""id"": ""01ff4c06-51a8-487c-be3f-e23112c4986d"",
            ""actions"": [
                {
                    ""name"": ""PlayTrack"",
                    ""type"": ""Button"",
                    ""id"": ""047aa849-c123-4f42-9e96-b32326ad4308"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextTrack"",
                    ""type"": ""Button"",
                    ""id"": ""bf8cc685-51a7-45fb-b152-5fff4f31ecca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PreviousTrack"",
                    ""type"": ""Button"",
                    ""id"": ""e585782c-1b20-496e-9797-bfb7b8bbab2e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d73dcad2-8fe3-4ae8-9a9d-de6d03f88963"",
                    ""path"": ""<Keyboard>/pageDown"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayTrack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2fecdf22-55f2-45e4-829a-4e42e8c6dc77"",
                    ""path"": ""<Keyboard>/end"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextTrack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9175d6c-0502-4622-8b06-0bb62b8b18dd"",
                    ""path"": ""<Keyboard>/home"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PreviousTrack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""SceneManagement"",
            ""id"": ""0e1b26a4-3e33-482d-9e8a-24769b4963cb"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""f83978b8-7695-47e9-a5a3-a8224731d1b6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""56c44121-329f-48d8-a3bd-b63ac14aea21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ed70116-2621-4f6d-9a17-e62f39102a6d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""435fffd8-c0b0-4c59-a951-1207130ee739"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PauseAction
            m_PauseAction = asset.FindActionMap("PauseAction", throwIfNotFound: true);
            m_PauseAction_PauseGame = m_PauseAction.FindAction("PauseGame", throwIfNotFound: true);
            // AudioAction
            m_AudioAction = asset.FindActionMap("AudioAction", throwIfNotFound: true);
            m_AudioAction_PlayTrack = m_AudioAction.FindAction("PlayTrack", throwIfNotFound: true);
            m_AudioAction_NextTrack = m_AudioAction.FindAction("NextTrack", throwIfNotFound: true);
            m_AudioAction_PreviousTrack = m_AudioAction.FindAction("PreviousTrack", throwIfNotFound: true);
            // SceneManagement
            m_SceneManagement = asset.FindActionMap("SceneManagement", throwIfNotFound: true);
            m_SceneManagement_Quit = m_SceneManagement.FindAction("Quit", throwIfNotFound: true);
            m_SceneManagement_MainMenu = m_SceneManagement.FindAction("MainMenu", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PauseAction
        private readonly InputActionMap m_PauseAction;
        private IPauseActionActions m_PauseActionActionsCallbackInterface;
        private readonly InputAction m_PauseAction_PauseGame;
        public struct PauseActionActions
        {
            private @InputActions m_Wrapper;
            public PauseActionActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @PauseGame => m_Wrapper.m_PauseAction_PauseGame;
            public InputActionMap Get() { return m_Wrapper.m_PauseAction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PauseActionActions set) { return set.Get(); }
            public void SetCallbacks(IPauseActionActions instance)
            {
                if (m_Wrapper.m_PauseActionActionsCallbackInterface != null)
                {
                    @PauseGame.started -= m_Wrapper.m_PauseActionActionsCallbackInterface.OnPauseGame;
                    @PauseGame.performed -= m_Wrapper.m_PauseActionActionsCallbackInterface.OnPauseGame;
                    @PauseGame.canceled -= m_Wrapper.m_PauseActionActionsCallbackInterface.OnPauseGame;
                }
                m_Wrapper.m_PauseActionActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PauseGame.started += instance.OnPauseGame;
                    @PauseGame.performed += instance.OnPauseGame;
                    @PauseGame.canceled += instance.OnPauseGame;
                }
            }
        }
        public PauseActionActions @PauseAction => new PauseActionActions(this);

        // AudioAction
        private readonly InputActionMap m_AudioAction;
        private IAudioActionActions m_AudioActionActionsCallbackInterface;
        private readonly InputAction m_AudioAction_PlayTrack;
        private readonly InputAction m_AudioAction_NextTrack;
        private readonly InputAction m_AudioAction_PreviousTrack;
        public struct AudioActionActions
        {
            private @InputActions m_Wrapper;
            public AudioActionActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @PlayTrack => m_Wrapper.m_AudioAction_PlayTrack;
            public InputAction @NextTrack => m_Wrapper.m_AudioAction_NextTrack;
            public InputAction @PreviousTrack => m_Wrapper.m_AudioAction_PreviousTrack;
            public InputActionMap Get() { return m_Wrapper.m_AudioAction; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(AudioActionActions set) { return set.Get(); }
            public void SetCallbacks(IAudioActionActions instance)
            {
                if (m_Wrapper.m_AudioActionActionsCallbackInterface != null)
                {
                    @PlayTrack.started -= m_Wrapper.m_AudioActionActionsCallbackInterface.OnPlayTrack;
                    @PlayTrack.performed -= m_Wrapper.m_AudioActionActionsCallbackInterface.OnPlayTrack;
                    @PlayTrack.canceled -= m_Wrapper.m_AudioActionActionsCallbackInterface.OnPlayTrack;
                    @NextTrack.started -= m_Wrapper.m_AudioActionActionsCallbackInterface.OnNextTrack;
                    @NextTrack.performed -= m_Wrapper.m_AudioActionActionsCallbackInterface.OnNextTrack;
                    @NextTrack.canceled -= m_Wrapper.m_AudioActionActionsCallbackInterface.OnNextTrack;
                    @PreviousTrack.started -= m_Wrapper.m_AudioActionActionsCallbackInterface.OnPreviousTrack;
                    @PreviousTrack.performed -= m_Wrapper.m_AudioActionActionsCallbackInterface.OnPreviousTrack;
                    @PreviousTrack.canceled -= m_Wrapper.m_AudioActionActionsCallbackInterface.OnPreviousTrack;
                }
                m_Wrapper.m_AudioActionActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PlayTrack.started += instance.OnPlayTrack;
                    @PlayTrack.performed += instance.OnPlayTrack;
                    @PlayTrack.canceled += instance.OnPlayTrack;
                    @NextTrack.started += instance.OnNextTrack;
                    @NextTrack.performed += instance.OnNextTrack;
                    @NextTrack.canceled += instance.OnNextTrack;
                    @PreviousTrack.started += instance.OnPreviousTrack;
                    @PreviousTrack.performed += instance.OnPreviousTrack;
                    @PreviousTrack.canceled += instance.OnPreviousTrack;
                }
            }
        }
        public AudioActionActions @AudioAction => new AudioActionActions(this);

        // SceneManagement
        private readonly InputActionMap m_SceneManagement;
        private ISceneManagementActions m_SceneManagementActionsCallbackInterface;
        private readonly InputAction m_SceneManagement_Quit;
        private readonly InputAction m_SceneManagement_MainMenu;
        public struct SceneManagementActions
        {
            private @InputActions m_Wrapper;
            public SceneManagementActions(@InputActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Quit => m_Wrapper.m_SceneManagement_Quit;
            public InputAction @MainMenu => m_Wrapper.m_SceneManagement_MainMenu;
            public InputActionMap Get() { return m_Wrapper.m_SceneManagement; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SceneManagementActions set) { return set.Get(); }
            public void SetCallbacks(ISceneManagementActions instance)
            {
                if (m_Wrapper.m_SceneManagementActionsCallbackInterface != null)
                {
                    @Quit.started -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnQuit;
                    @Quit.performed -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnQuit;
                    @Quit.canceled -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnQuit;
                    @MainMenu.started -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnMainMenu;
                    @MainMenu.performed -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnMainMenu;
                    @MainMenu.canceled -= m_Wrapper.m_SceneManagementActionsCallbackInterface.OnMainMenu;
                }
                m_Wrapper.m_SceneManagementActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Quit.started += instance.OnQuit;
                    @Quit.performed += instance.OnQuit;
                    @Quit.canceled += instance.OnQuit;
                    @MainMenu.started += instance.OnMainMenu;
                    @MainMenu.performed += instance.OnMainMenu;
                    @MainMenu.canceled += instance.OnMainMenu;
                }
            }
        }
        public SceneManagementActions @SceneManagement => new SceneManagementActions(this);
        public interface IPauseActionActions
        {
            void OnPauseGame(InputAction.CallbackContext context);
        }
        public interface IAudioActionActions
        {
            void OnPlayTrack(InputAction.CallbackContext context);
            void OnNextTrack(InputAction.CallbackContext context);
            void OnPreviousTrack(InputAction.CallbackContext context);
        }
        public interface ISceneManagementActions
        {
            void OnQuit(InputAction.CallbackContext context);
            void OnMainMenu(InputAction.CallbackContext context);
        }
    }
}
